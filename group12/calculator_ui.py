# -*- coding: utf-8 -*-
# Do not edit this file unless you know what you are doing.


import sys
import time
from PyQt5.QtWidgets import (QMainWindow, QWidget, QApplication,
                             QLineEdit, QPushButton, QGridLayout, QSizePolicy)
from PyQt5.QtGui import QRegExpValidator
from PyQt5.QtCore import Qt, QRegExp, QRect
from SE import * 


class Calculator(QWidget):
    """
    计算器的基本页面的基本界面, 完成基本的计算
    """

    def __init__(self):
        super(Calculator, self).__init__()
        self.ui()
        self.char_stack = []  # 操作符号的栈
        self.num_stack = []  # 操作数的栈
        self.nums = [chr(i) for i in range(48, 58)]  # 用于判断按钮的值是不是数字
        self.operators = ['sin', 'cos', 'tan','arcsin','arccos','arctan']  # 用于判断按钮的值是不是操作符

        self.empty_flag = True  # 这个flag的含义是来判断计算器是不是第一次启动，在显示屏幕中无数据
        self.after_operator = False  # 看了计算器的计算，比如1+2在输入+后，1海显示在屏幕上，输入了2之后，1就被替换了， 这个flag的作用就是这样的

        self.char_top = ''  # 保留栈顶的操作符号
        self.num_top = 0  # 保留栈顶的数值
        self.res = 0  # 保留计算结果，看计算器计算一次后，在继续按等号，还会重复最近一次的计算1+2,得到3之后，在按等号就是3+2， 以此类推.

        # >先计算, 为什么同样的符号改成了后计算, 是为了方便做一项操作,
        # 就是在你计算一个表达式之后，在继续按住等号, 以及会执行最后一次的符号运算
        self.priority_map = {
            '++': '>', '+-': '>', '-+': '>', '--': '>',
            '+*': '<', '+/': '<', '-*': '<', '-/': '<',
            '**': '>', '//': '>', '*+': '>', '/+': '>',
            '*-': '>', '/-': '>', '*/': '>', '/*': '>'
        }

    def ui(self):
        super(Calculator, self).__init__()
        # 设置窗口的初始大小和位置
        self.setGeometry(300, 150, 300, 400)
        self.setWindowTitle('自定义三角函数计算器')
        # 这个函数主要适用于初始化界面
        reg = QRegExp("^$")  # 把键盘禁用了, 仅可以按钮的输入
        validator = QRegExpValidator(reg, self)

        # 这个line_edit就是显示屏....
        self.line_edit = QLineEdit('0', self)
        self.line_edit.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.line_edit.setAlignment(Qt.AlignRight)
        self.line_edit.setValidator(validator)
        self.line_edit.setReadOnly(True)

        #  使用girdlayout进行界面布局
        grid = QGridLayout()
        self.setLayout(grid)

        btn_names = [
            'C', 'sin', 'cos', 'tan',
            '7', '8', '9', 'arcsin',
            '4', '5', '6', 'arccos',
            '1', '2', '3', 'arctan',
            '0', '', '.', '='
        ]

        grid.addWidget(self.line_edit, 0, 0, 1, 4)
        positions = [(i, j) for i in range(1, 6) for j in range(4)]
        # # Define button size
        # button_width = 80
        # button_height = 60
        self.buttons = []
        for pos, name in zip(positions, btn_names):
            if name == '':
                continue
            btn = QPushButton(name)
            # btn.setFixedSize(button_width, button_height)  # Set button size
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            # 在布局的时候，直接把每个按钮连接到点击事件上
            btn.clicked.connect(self.show_msg)
            self.buttons.append(btn)
            if name == '0':
                tmp_pos = (pos[0], pos[1] + 1)
                grid.addWidget(btn, *pos, 1, 2)
            else:
                grid.addWidget(btn, *pos)
        self.setFocusPolicy(Qt.StrongFocus)
        self.setWindowTitle('Calculator')
        # self.move(300, 150)
        self.setGeometry(300, 150, 600, 700)  # Set initial size and position
        self.show()
        self.line_edit.setStyleSheet("""
            QLineEdit {
                background-color: #ffffff;
                border: 1px solid #c0c0c0;
                border-radius: 5px;
                font-size: 18px;
                padding: 5px;
            }
        """)

        # 美化按钮
        for btn in self.buttons:
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #f0f0f0;
                    border: 1px solid #d4d4d4;
                    border-radius: 5px;
                    font-size: 16px;
                }
                QPushButton:hover {
                    background-color: #d0d0d0;
                }
                QPushButton:pressed {
                    background-color: #b0b0b0;
                }
            """)

        # 调整字体大小
        self.adjust_font_size()
    def create_button(self, name):
        btn = QPushButton(name)
        btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        btn.clicked.connect(self.on_button_clicked)
        return btn
    def resizeEvent(self, event):
        # Adjust font size based on the widget size
        self.adjust_font_size()
        super().resizeEvent(event)

    def adjust_font_size(self):
        width = self.width()
        height = self.height()

        # Calculate a font size based on the window size
        font_size = max(min(width // 15, height // 15), 10)

        font = self.line_edit.font()
        font.setPointSize(font_size)
        self.line_edit.setFont(font)

        for btn in self.buttons:
            btn.setFont(font)

    def clear_line_edit(self):
        self.line_edit.clear()
        self.line_edit.setText('0')
        self.res = 0
        # 清空，就相当于刚打开计算器一样
        self.empty_flag = True

    def deal_num_btn(self, sender_text):
        _str = self.line_edit.text()
        print(_str)
        #print(_str)
        if _str == '0' or _str == 'Error' or self.empty_flag:
            self.line_edit.clear()
            self.line_edit.setText('Error')
            self.num_operator = False
        elif self.after_operator:
            self.num_operator = True
            num_ = ''
            _str = _str+sender_text
            self.line_edit.setText(_str)
            for i in _str:
                print(i)
                if str.isdigit(i):
                    num_ = num_ + i 
            self.num = int(num_)
            self.empty_flag = False
        else:
            self.line_edit.setText('Error')
            self.empty_flag = True
            self.num_operator = False

    def deal_operator_btn(self, sender_text):
        # 操作符号 
        if self.empty_flag:
            self.line_edit.clear()
            self.line_edit.setText(sender_text)
            self.after_operator = True
            self.operators_way = sender_text
            self.empty_flag = False
        else:
            _str = 'Error'
            self.line_edit.setText(_str)
            self.after_operator = False
        
    def deal_point_btn(self):
        _str = self.line_edit.text()
        self.empty_flag = False
        # 计算line_edit中有多少小数点
        point_count = self.line_edit.text().count('.')
        if point_count == 0:
            _str += '.'
        self.line_edit.setText(_str)

    def deal_equal_btn(self):
        try:
            _str = self.line_edit.text()
            if self.after_operator == True and self.num_operator==True:
                if 'sin' in self.operators_way:
                    self.line_edit.setText(str(sin_taylor(self.num))[:10])
                    print(str(sin_taylor(self.num)))
                if 'cos' in self.operators_way:
                    self.line_edit.setText(str(cos_taylor(self.num))[:10])
                    print(str(sin_taylor(self.num)))
                if 'tan' in self.operators_way:
                    self.line_edit.setText(str(tan_taylor(self.num))[:10])
                    print(str(sin_taylor(self.num)))
            pass
        except Exception as e:
            self.line_edit.setText(f'Error: {e}')
            
        print(_str)
        #self.empty_flag = True
        #self.line_edit.clear()
        #self.line_edit.setText('0')
        #self.res = 0

        #self.num_stack.clear()
        #self.char_stack.clear()

    def show_msg(self):
        # 看ui函数，每个按钮都连接了show_msg的点击事件
        sender = self.sender()
        sender_text = sender.text()

        if sender_text == 'C':
            self.clear_line_edit()
        elif sender_text in self.nums:
            self.deal_num_btn(sender_text)
        elif sender_text == '.':
            self.deal_point_btn()
        elif sender_text in self.operators:
            self.deal_operator_btn(sender_text)
        elif sender_text == '=':
            self.deal_equal_btn()
    

    def adjust_font_size(self):
        # 根据窗口大小调整字体大小
        width = self.width()
        height = self.height()
        font_size = max(min(width // 15, height // 15), 8)
        font = self.line_edit.font()
        font.setPointSize(font_size)
        self.line_edit.setFont(font)
        for btn in self.buttons:
            btn.setFont(font)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    cal = Calculator()
    sys.exit(app.exec_())
